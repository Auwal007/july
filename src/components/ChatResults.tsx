import React, { useState } from 'react';
import { Brain, Target, BookOpen, Code, TrendingUp, Download, RotateCcw, ExternalLink, CheckCircle, Clock, Star, Home, ArrowLeft, FileText } from 'lucide-react';
import jsPDF from 'jspdf';

interface ChatAssessmentData {
  course: string;
  conversation: any[];
  skillsAnalysis: {
    currentSkills: string[];
    missingSkills: string[];
    strengthAreas: string[];
    improvementAreas: string[];
    recommendedPath: string[];
  };
  personalizedPlan: {
    shortTerm: string[];
    mediumTerm: string[];
    longTerm: string[];
    resources: any[];
    projects: any[];
  };
  employabilityScore: number;
  confidence: number;
}

interface ChatResultsProps {
  assessmentData: ChatAssessmentData;
  onStartOver: () => void;
  onBackToHome?: () => void;
  onNewAssessment?: () => void;
}

const ChatResults: React.FC<ChatResultsProps> = ({ assessmentData, onStartOver, onBackToHome, onNewAssessment }) => {
  const [activeTab, setActiveTab] = useState<'overview' | 'skills' | 'plan' | 'resources'>('overview');
  
  const { course, skillsAnalysis, personalizedPlan, employabilityScore, confidence } = assessmentData;

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getScoreBackground = (score: number) => {
    if (score >= 80) return 'from-green-600 to-green-700';
    if (score >= 60) return 'from-yellow-600 to-yellow-700';
    return 'from-red-600 to-red-700';
  };

  const getScoreMessage = (score: number) => {
    if (score >= 80) return 'Outstanding! You have strong employability potential.';
    if (score >= 60) return 'Good foundation! With focused development, you\'ll be highly competitive.';
    return 'Significant opportunity for growth. Let\'s build a strong development plan.';
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 80) return 'text-blue-600';
    if (confidence >= 60) return 'text-yellow-600';
    return 'text-gray-600';
  };

  const handleDownloadReport = () => {
    // Generate text content including chat conversation
    const chatHistory = assessmentData.conversation
      .map(msg => `[${msg.timestamp ? new Date(msg.timestamp).toLocaleTimeString() : 'Time'}] ${msg.type.toUpperCase()}: ${msg.content}`)
      .join('\n\n');

    const content = `
SkillBridge AI - Comprehensive Career Assessment Report

Student: ${course} Graduate
Assessment Date: ${new Date().toLocaleDateString()}
Assessment Type: AI-Powered Conversational Analysis

=== COMPLETE CHAT CONVERSATION ===
${chatHistory}

=== EMPLOYABILITY SCORE ===
Overall Score: ${employabilityScore}%
AI Confidence Level: ${confidence}%
${getScoreMessage(employabilityScore)}

=== SKILLS ANALYSIS ===

Current Strengths:
${skillsAnalysis.currentSkills.map(skill => `✓ ${skill}`).join('\n')}

Areas for Development:
${skillsAnalysis.missingSkills.map(skill => `• ${skill}`).join('\n')}

Strength Areas:
${skillsAnalysis.strengthAreas.map(area => `⭐ ${area}`).join('\n')}

Priority Improvement Areas:
${skillsAnalysis.improvementAreas.map(area => `🎯 ${area}`).join('\n')}

=== PERSONALIZED DEVELOPMENT PLAN ===

Short-term Goals (1-3 months):
${personalizedPlan.shortTerm.map((goal, index) => `${index + 1}. ${goal}`).join('\n')}

Medium-term Goals (3-6 months):
${personalizedPlan.mediumTerm.map((goal, index) => `${index + 1}. ${goal}`).join('\n')}

Long-term Goals (6+ months):
${personalizedPlan.longTerm.map((goal, index) => `${index + 1}. ${goal}`).join('\n')}

=== RECOMMENDED RESOURCES ===
${personalizedPlan.resources.map(resource => `• ${resource.title} - ${resource.description}\n  Provider: ${resource.provider}\n  URL: ${resource.url}`).join('\n\n')}

=== PROJECT RECOMMENDATIONS ===
${personalizedPlan.projects.map(project => `• ${project.title}\n  Description: ${project.description}\n  Skills: ${project.skills.join(', ')}\n  Difficulty: ${project.difficulty}`).join('\n\n')}

Generated by SkillBridge AI - Your Intelligent Career Companion
    `;
    
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `SkillBridge_AI_Assessment_${course.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleDownloadPDF = () => {
    const pdf = new jsPDF();
    const pageWidth = pdf.internal.pageSize.getWidth();
    const pageHeight = pdf.internal.pageSize.getHeight();
    let yPosition = 20;
    const margin = 20;
    const lineHeight = 7;
    const maxWidth = pageWidth - 2 * margin;

    // Helper function to add text with wrapping
    const addText = (text: string, fontSize: number = 12, isBold: boolean = false) => {
      pdf.setFontSize(fontSize);
      if (isBold) {
        pdf.setFont(undefined, 'bold');
      } else {
        pdf.setFont(undefined, 'normal');
      }
      
      const lines = pdf.splitTextToSize(text, maxWidth);
      
      lines.forEach((line: string) => {
        if (yPosition > pageHeight - 30) {
          pdf.addPage();
          yPosition = 20;
        }
        pdf.text(line, margin, yPosition);
        yPosition += lineHeight;
      });
      yPosition += 3; // Extra spacing after paragraphs
    };

    // Header
    addText('SkillBridge AI - Career Assessment Report', 16, true);
    addText(`Student: ${course} Graduate`, 12);
    addText(`Assessment Date: ${new Date().toLocaleDateString()}`, 12);
    addText(`Assessment Type: AI-Powered Conversational Analysis`, 12);
    yPosition += 10;

    // Employability Score
    addText('EMPLOYABILITY SCORE', 14, true);
    addText(`Overall Score: ${employabilityScore}%`, 12);
    addText(`AI Confidence Level: ${confidence}%`, 12);
    addText(getScoreMessage(employabilityScore), 12);
    yPosition += 10;

    // Skills Analysis
    addText('SKILLS ANALYSIS', 14, true);
    
    addText('Current Strengths:', 12, true);
    skillsAnalysis.currentSkills.forEach(skill => {
      addText(`✓ ${skill}`, 11);
    });
    yPosition += 5;

    addText('Areas for Development:', 12, true);
    skillsAnalysis.missingSkills.forEach(skill => {
      addText(`• ${skill}`, 11);
    });
    yPosition += 5;

    addText('Strength Areas:', 12, true);
    skillsAnalysis.strengthAreas.forEach(area => {
      addText(`⭐ ${area}`, 11);
    });
    yPosition += 5;

    addText('Priority Improvement Areas:', 12, true);
    skillsAnalysis.improvementAreas.forEach(area => {
      addText(`🎯 ${area}`, 11);
    });
    yPosition += 10;

    // Development Plan
    addText('PERSONALIZED DEVELOPMENT PLAN', 14, true);
    
    addText('Short-term Goals (1-3 months):', 12, true);
    personalizedPlan.shortTerm.forEach((goal, index) => {
      addText(`${index + 1}. ${goal}`, 11);
    });
    yPosition += 5;

    addText('Medium-term Goals (3-6 months):', 12, true);
    personalizedPlan.mediumTerm.forEach((goal, index) => {
      addText(`${index + 1}. ${goal}`, 11);
    });
    yPosition += 5;

    addText('Long-term Goals (6+ months):', 12, true);
    personalizedPlan.longTerm.forEach((goal, index) => {
      addText(`${index + 1}. ${goal}`, 11);
    });
    yPosition += 10;

    // Resources
    if (personalizedPlan.resources && personalizedPlan.resources.length > 0) {
      addText('RECOMMENDED RESOURCES', 14, true);
      personalizedPlan.resources.forEach(resource => {
        addText(`• ${resource.title}`, 11, true);
        addText(`  ${resource.description}`, 11);
        addText(`  Provider: ${resource.provider}`, 11);
        if (resource.url) {
          addText(`  URL: ${resource.url}`, 11);
        }
        yPosition += 3;
      });
      yPosition += 5;
    }

    // Projects
    if (personalizedPlan.projects && personalizedPlan.projects.length > 0) {
      addText('PROJECT RECOMMENDATIONS', 14, true);
      personalizedPlan.projects.forEach(project => {
        addText(`• ${project.title}`, 11, true);
        addText(`  ${project.description}`, 11);
        addText(`  Skills: ${project.skills.join(', ')}`, 11);
        addText(`  Difficulty: ${project.difficulty}`, 11);
        yPosition += 3;
      });
    }

    // Chat Conversation (New Page)
    pdf.addPage();
    yPosition = 20;
    addText('COMPLETE CHAT CONVERSATION', 14, true);
    yPosition += 5;

    assessmentData.conversation.forEach(msg => {
      const timestamp = msg.timestamp ? new Date(msg.timestamp).toLocaleTimeString() : 'Time';
      const sender = msg.type === 'user' ? 'YOU' : 'AI';
      
      addText(`[${timestamp}] ${sender}:`, 11, true);
      // Clean the message content from HTML tags for PDF
      const cleanContent = msg.content.replace(/<[^>]*>/g, '').replace(/&nbsp;/g, ' ');
      addText(cleanContent, 11);
      yPosition += 3;
    });

    // Footer
    yPosition += 10;
    addText('Generated by SkillBridge AI - Your Intelligent Career Companion', 10);

    // Save the PDF
    pdf.save(`SkillBridge_AI_Assessment_${course.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`);
  };

  const tabContent = {
    overview: (
      <div className="space-y-4 sm:space-y-6">
        {/* Score Overview */}
        <div className="grid sm:grid-cols-2 gap-4 sm:gap-6">
          <div className="bg-white rounded-lg p-4 sm:p-6 shadow-sm">
            <div className="flex items-center justify-between mb-3 sm:mb-4">
              <h3 className="text-base sm:text-lg font-semibold text-gray-900">Employability Score</h3>
              <TrendingUp className={`w-4 h-4 sm:w-5 sm:h-5 ${getScoreColor(employabilityScore)}`} />
            </div>
            <div className="text-center">
              <div className={`text-3xl sm:text-4xl font-bold ${getScoreColor(employabilityScore)}`}>
                {employabilityScore}%
              </div>
              <p className="text-gray-600 mt-2 text-sm sm:text-base">{getScoreMessage(employabilityScore)}</p>
            </div>
          </div>

          <div className="bg-white rounded-lg p-4 sm:p-6 shadow-sm">
            <div className="flex items-center justify-between mb-3 sm:mb-4">
              <h3 className="text-base sm:text-lg font-semibold text-gray-900">AI Confidence</h3>
              <Brain className={`w-4 h-4 sm:w-5 sm:h-5 ${getConfidenceColor(confidence)}`} />
            </div>
            <div className="text-center">
              <div className={`text-3xl sm:text-4xl font-bold ${getConfidenceColor(confidence)}`}>
                {confidence}%
              </div>
              <p className="text-gray-600 mt-2 text-sm sm:text-base">Assessment reliability based on conversation depth</p>
            </div>
          </div>
        </div>

        {/* Quick Summary */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-4 sm:p-6 text-white">
          <h3 className="text-lg sm:text-xl font-semibold mb-3 sm:mb-4">🎯 Key Insights</h3>
          <div className="grid sm:grid-cols-2 gap-3 sm:gap-4">
            <div>
              <h4 className="font-medium mb-2 text-sm sm:text-base">Your Strengths:</h4>
              <ul className="space-y-1 text-xs sm:text-sm opacity-90">
                {skillsAnalysis.strengthAreas.slice(0, 3).map((strength, index) => (
                  <li key={index} className="flex items-center space-x-2">
                    <CheckCircle className="w-3 h-3 sm:w-4 sm:h-4 flex-shrink-0" />
                    <span>{strength}</span>
                  </li>
                ))}
              </ul>
            </div>
            <div>
              <h4 className="font-medium mb-2">Priority Focus Areas:</h4>
              <ul className="space-y-1 text-sm opacity-90">
                {skillsAnalysis.improvementAreas.slice(0, 3).map((area, index) => (
                  <li key={index} className="flex items-center space-x-2">
                    <Target className="w-4 h-4" />
                    <span>{area}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>
    ),

    skills: (
      <div className="space-y-6">
        <div className="grid md:grid-cols-2 gap-6">
          {/* Current Skills */}
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center space-x-2 mb-4">
              <CheckCircle className="w-5 h-5 text-green-600" />
              <h3 className="text-lg font-semibold text-gray-900">Current Skills</h3>
            </div>
            <div className="space-y-2">
              {skillsAnalysis.currentSkills.map((skill, index) => (
                <div key={index} className="flex items-center space-x-2 p-2 bg-green-50 rounded">
                  <CheckCircle className="w-4 h-4 text-green-600" />
                  <span className="text-green-800">{skill}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Skills to Develop */}
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center space-x-2 mb-4">
              <Target className="w-5 h-5 text-orange-600" />
              <h3 className="text-lg font-semibold text-gray-900">Skills to Develop</h3>
            </div>
            <div className="space-y-2">
              {skillsAnalysis.missingSkills.map((skill, index) => (
                <div key={index} className="flex items-center space-x-2 p-2 bg-orange-50 rounded">
                  <Target className="w-4 h-4 text-orange-600" />
                  <span className="text-orange-800">{skill}</span>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Recommended Learning Path */}
        <div className="bg-white rounded-lg p-6 shadow-sm">
          <div className="flex items-center space-x-2 mb-4">
            <BookOpen className="w-5 h-5 text-blue-600" />
            <h3 className="text-lg font-semibold text-gray-900">Recommended Learning Path</h3>
          </div>
          <div className="space-y-3">
            {skillsAnalysis.recommendedPath.map((step, index) => (
              <div key={index} className="flex items-start space-x-3 p-3 bg-blue-50 rounded-lg">
                <div className="w-6 h-6 bg-blue-600 text-white rounded-full flex items-center justify-center text-sm font-semibold">
                  {index + 1}
                </div>
                <span className="text-blue-800">{step}</span>
              </div>
            ))}
          </div>
        </div>
      </div>
    ),

    plan: (
      <div className="space-y-6">
        {/* Timeline-based Plan */}
        <div className="space-y-6">
          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center space-x-2 mb-4">
              <Clock className="w-5 h-5 text-green-600" />
              <h3 className="text-lg font-semibold text-gray-900">Short-term Goals (1-3 months)</h3>
            </div>
            <div className="space-y-2">
              {personalizedPlan.shortTerm.map((goal, index) => (
                <div key={index} className="flex items-start space-x-3 p-3 bg-green-50 rounded-lg">
                  <CheckCircle className="w-5 h-5 text-green-600 mt-0.5" />
                  <span className="text-green-800">{goal}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center space-x-2 mb-4">
              <Target className="w-5 h-5 text-blue-600" />
              <h3 className="text-lg font-semibold text-gray-900">Medium-term Goals (3-6 months)</h3>
            </div>
            <div className="space-y-2">
              {personalizedPlan.mediumTerm.map((goal, index) => (
                <div key={index} className="flex items-start space-x-3 p-3 bg-blue-50 rounded-lg">
                  <Target className="w-5 h-5 text-blue-600 mt-0.5" />
                  <span className="text-blue-800">{goal}</span>
                </div>
              ))}
            </div>
          </div>

          <div className="bg-white rounded-lg p-6 shadow-sm">
            <div className="flex items-center space-x-2 mb-4">
              <Star className="w-5 h-5 text-purple-600" />
              <h3 className="text-lg font-semibold text-gray-900">Long-term Goals (6+ months)</h3>
            </div>
            <div className="space-y-2">
              {personalizedPlan.longTerm.map((goal, index) => (
                <div key={index} className="flex items-start space-x-3 p-3 bg-purple-50 rounded-lg">
                  <Star className="w-5 h-5 text-purple-600 mt-0.5" />
                  <span className="text-purple-800">{goal}</span>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Project Recommendations */}
        <div className="bg-white rounded-lg p-6 shadow-sm">
          <div className="flex items-center space-x-2 mb-4">
            <Code className="w-5 h-5 text-indigo-600" />
            <h3 className="text-lg font-semibold text-gray-900">Recommended Projects</h3>
          </div>
          <div className="grid gap-4">
            {personalizedPlan.projects.map((project, index) => (
              <div key={index} className="border border-gray-200 rounded-lg p-4">
                <div className="flex items-start justify-between mb-2">
                  <h4 className="font-semibold text-gray-900">{project.title}</h4>
                  <span className={`px-2 py-1 text-xs rounded-full ${
                    project.difficulty === 'beginner' ? 'bg-green-100 text-green-800' :
                    project.difficulty === 'intermediate' ? 'bg-yellow-100 text-yellow-800' :
                    'bg-red-100 text-red-800'
                  }`}>
                    {project.difficulty}
                  </span>
                </div>
                <p className="text-gray-600 mb-3">{project.description}</p>
                <div className="flex flex-wrap gap-2">
                  {project.skills.map((skill: string, skillIndex: number) => (
                    <span key={skillIndex} className="px-2 py-1 bg-blue-100 text-blue-800 text-xs rounded">
                      {skill}
                    </span>
                  ))}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    ),

    resources: (
      <div className="space-y-6">
        <div className="grid gap-4">
          {personalizedPlan.resources.map((resource, index) => (
            <div key={index} className="bg-white rounded-lg p-6 shadow-sm border-l-4 border-blue-500">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-900 mb-2">{resource.title}</h4>
                  <p className="text-gray-600 mb-3">{resource.description}</p>
                  <div className="flex items-center space-x-4 text-sm text-gray-500">
                    <span className="flex items-center space-x-1">
                      <BookOpen className="w-4 h-4" />
                      <span>{resource.provider}</span>
                    </span>
                    {resource.duration && (
                      <span className="flex items-center space-x-1">
                        <Clock className="w-4 h-4" />
                        <span>{resource.duration}</span>
                      </span>
                    )}
                  </div>
                </div>
                <a
                  href={resource.url}
                  target="_blank"
                  rel="noopener noreferrer"
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center space-x-2"
                >
                  <ExternalLink className="w-4 h-4" />
                  <span>Visit</span>
                </a>
              </div>
            </div>
          ))}
        </div>
      </div>
    )
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      <div className="max-w-6xl mx-auto px-3 sm:px-4 py-4 sm:py-8">
        {/* Navigation Header */}
        <div className="bg-white rounded-lg shadow-sm p-3 sm:p-4 mb-4 sm:mb-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-2 sm:space-x-4">
              <button
                onClick={onBackToHome || onStartOver}
                className="flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-2 text-gray-600 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors duration-200 text-sm"
              >
                <ArrowLeft className="w-4 h-4" />
                <span className="hidden sm:inline">Back to Home</span>
                <span className="sm:hidden">Back</span>
              </button>
              
              <div className="h-6 w-px bg-gray-300"></div>
              
              <button
                onClick={onNewAssessment || onStartOver}
                className="flex items-center space-x-1 sm:space-x-2 px-2 sm:px-3 py-2 text-gray-600 hover:text-green-600 hover:bg-green-50 rounded-lg transition-colors duration-200 text-sm"
              >
                <RotateCcw className="w-4 h-4" />
                <span className="hidden sm:inline">New Assessment</span>
                <span className="sm:hidden">New</span>
              </button>
            </div>
            
            <div className="flex items-center space-x-2">
              <Home className="w-4 h-4 text-gray-400" />
              <span className="text-xs sm:text-sm text-gray-600 hidden sm:inline">SkillBridge AI</span>
            </div>
          </div>
        </div>
        
        {/* Header */}
        <div className="bg-white rounded-lg shadow-sm p-4 sm:p-6 mb-4 sm:mb-6">
          <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between space-y-3 sm:space-y-0">
            <div>
              <h1 className="text-xl sm:text-2xl lg:text-3xl font-bold text-gray-900">Your Personalized Assessment Results</h1>
              <p className="text-gray-600 mt-1 text-sm sm:text-base">Comprehensive analysis for {course} graduates</p>
            </div>
            <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3">
              <button
                onClick={handleDownloadPDF}
                className="px-3 sm:px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 flex items-center justify-center space-x-2 text-sm sm:text-base"
              >
                <Download className="w-4 h-4" />
                <span>Download PDF</span>
              </button>
              <button
                onClick={handleDownloadReport}
                className="px-3 sm:px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 flex items-center justify-center space-x-2 text-sm sm:text-base"
              >
                <FileText className="w-4 h-4" />
                <span>Download TXT</span>
              </button>
              <button
                onClick={onStartOver}
                className="px-3 sm:px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 flex items-center justify-center space-x-2 text-sm sm:text-base"
              >
                <RotateCcw className="w-4 h-4" />
                <span>New Assessment</span>
              </button>
            </div>
          </div>
        </div>

        {/* Navigation Tabs */}
        <div className="bg-white rounded-lg shadow-sm mb-4 sm:mb-6">
          <div className="flex space-x-0 border-b overflow-x-auto">
            {[
              { key: 'overview', label: 'Overview', icon: TrendingUp },
              { key: 'skills', label: 'Skills Analysis', icon: Brain },
              { key: 'plan', label: 'Development Plan', icon: Target },
              { key: 'resources', label: 'Resources', icon: BookOpen }
            ].map((tab) => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.key}
                  onClick={() => setActiveTab(tab.key as any)}
                  className={`flex items-center space-x-1 sm:space-x-2 px-3 sm:px-6 py-3 sm:py-4 font-medium border-b-2 whitespace-nowrap text-sm sm:text-base ${
                    activeTab === tab.key
                      ? 'border-blue-600 text-blue-600'
                      : 'border-transparent text-gray-600 hover:text-gray-900'
                  }`}
                >
                  <Icon className="w-4 h-4" />
                  <span className="hidden sm:inline">{tab.label}</span>
                  <span className="sm:hidden">{tab.label.split(' ')[0]}</span>
                </button>
              );
            })}
          </div>
        </div>

        {/* Tab Content */}
        <div className="mb-6 sm:mb-8">
          {tabContent[activeTab]}
        </div>

        {/* Footer CTA */}
        <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-4 sm:p-6 text-white text-center">
          <h3 className="text-lg sm:text-xl font-semibold mb-2">Ready to Start Your Journey?</h3>
          <p className="mb-4 opacity-90 text-sm sm:text-base">
            Use your personalized plan to build the skills that will make you highly employable in the Nigerian job market.
          </p>
          <div className="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-4">
            <button
              onClick={handleDownloadPDF}
              className="px-4 sm:px-6 py-2 bg-white text-red-600 rounded-lg hover:bg-gray-100 font-medium text-sm sm:text-base flex items-center justify-center space-x-2"
            >
              <Download className="w-4 h-4" />
              <span>Download PDF</span>
            </button>
            <button
              onClick={handleDownloadReport}
              className="px-4 sm:px-6 py-2 bg-white text-blue-600 rounded-lg hover:bg-gray-100 font-medium text-sm sm:text-base flex items-center justify-center space-x-2"
            >
              <FileText className="w-4 h-4" />
              <span>Download TXT</span>
            </button>
            <button
              onClick={onStartOver}
              className="px-4 sm:px-6 py-2 border border-white text-white rounded-lg hover:bg-white hover:text-blue-600 font-medium text-sm sm:text-base"
            >
              Start New Assessment
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ChatResults;
